// // handle handshake and compression packets manually before starting the play loops
// let packet = client_reader.recv_packet_raw().await?;
// tracing::debug!(
//     "client to server: {:?} {:?}",
//     current_state,
//     truncated(format!("{:?}", packet), TRUNCATE_LENGTH)
// );
// server_writer.send_packet_raw(&packet).await?;

// let mut r = &packet.body[..];
// let handshake = HandshakeC2s::decode(&mut r)?;

// match handshake.next_state {
//     HandshakeNextState::Status => {
//         current_state = PacketState::Status;
//     }
//     HandshakeNextState::Login => {
//         current_state = PacketState::Login;

//         let packet = client_reader.recv_packet_raw().await?; // LoginHelloC2s
//         tracing::debug!(
//             "client to server: {:?} {:?}",
//             current_state,
//             truncated(format!("{:?}", packet), TRUNCATE_LENGTH)
//         );
//         server_writer.send_packet_raw(&packet).await?; // LoginHelloC2

//         // server replies with LoginCompressionS2c, which we need to intercept
//         let packet = server_reader.recv_packet_raw().await?;
//         let mut r = &packet.body[..];
//         let compression = LoginCompressionS2c::decode(&mut r)?; // if this fails, encryption is enabled and we can not continue

//         let threshold = compression.threshold.0 as u32;
//         client_reader.set_compression(Some(threshold));
//         client_writer.set_compression(Some(threshold));
//         server_reader.set_compression(Some(threshold));
//         server_writer.set_compression(Some(threshold));

//         tracing::debug!(
//             "server to client: {:?} {:?}",
//             current_state,
//             truncated(format!("{:?}", packet), TRUNCATE_LENGTH)
//         );
//         client_writer.send_packet_raw(&packet).await?;

//         // expect a LoginSuccessS2c from the server
//         let packet = server_reader.recv_packet_raw().await?;
//         tracing::debug!(
//             "server to client: {:?} {:?}",
//             current_state,
//             truncated(format!("{:?}", packet), TRUNCATE_LENGTH)
//         );
//         client_writer.send_packet_raw(&packet).await?;

//         current_state = PacketState::Play;
//     }
// }

// these loops _should_ only contain Play packets
